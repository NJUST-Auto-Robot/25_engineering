<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [MAODIE\MAODIE.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image MAODIE\MAODIE.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6210000: Last Updated: Sun Aug 10 00:05:21 2025
<BR><P>
<H3>Maximum Stack Usage =        200 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
Back_endB2_StateFunc &rArr; Sigancatch &rArr; Read_RGB_HSL &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC_IRQHandler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[5e]">StartDefaultTask</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5e]">StartDefaultTask</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[5f]">motion_process_task</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5f]">motion_process_task</a><BR>
 <LI><a href="#[60]">sensor_process_task</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[60]">sensor_process_task</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[65]">Back_beginA1_StateFunc</a> from commander.o(.text.Back_beginA1_StateFunc) referenced 2 times from commander.o(.text.motion_StateManager_Init)
 <LI><a href="#[69]">Back_beginA2_StateFunc</a> from commander.o(.text.Back_beginA2_StateFunc) referenced 2 times from commander.o(.text.motion_StateManager_Init)
 <LI><a href="#[6d]">Back_beginA3_StateFunc</a> from commander.o(.text.Back_beginA3_StateFunc) referenced 2 times from commander.o(.text.motion_StateManager_Init)
 <LI><a href="#[72]">Back_beginB1_StateFunc</a> from commander.o(.text.Back_beginB1_StateFunc) referenced 2 times from commander.o(.text.motion_StateManager_Init)
 <LI><a href="#[76]">Back_beginB2_StateFunc</a> from commander.o(.text.Back_beginB2_StateFunc) referenced 2 times from commander.o(.text.motion_StateManager_Init)
 <LI><a href="#[7a]">Back_beginB3_StateFunc</a> from commander.o(.text.Back_beginB3_StateFunc) referenced 2 times from commander.o(.text.motion_StateManager_Init)
 <LI><a href="#[7f]">Back_beginC1_StateFunc</a> from commander.o(.text.Back_beginC1_StateFunc) referenced 2 times from commander.o(.text.motion_StateManager_Init)
 <LI><a href="#[83]">Back_beginC2_StateFunc</a> from commander.o(.text.Back_beginC2_StateFunc) referenced 2 times from commander.o(.text.motion_StateManager_Init)
 <LI><a href="#[87]">Back_beginC3_StateFunc</a> from commander.o(.text.Back_beginC3_StateFunc) referenced 2 times from commander.o(.text.motion_StateManager_Init)
 <LI><a href="#[66]">Back_endA1_StateFunc</a> from commander.o(.text.Back_endA1_StateFunc) referenced 2 times from commander.o(.text.motion_StateManager_Init)
 <LI><a href="#[6a]">Back_endA2_StateFunc</a> from commander.o(.text.Back_endA2_StateFunc) referenced 2 times from commander.o(.text.motion_StateManager_Init)
 <LI><a href="#[6e]">Back_endA3_StateFunc</a> from commander.o(.text.Back_endA3_StateFunc) referenced 2 times from commander.o(.text.motion_StateManager_Init)
 <LI><a href="#[73]">Back_endB1_StateFunc</a> from commander.o(.text.Back_endB1_StateFunc) referenced 2 times from commander.o(.text.motion_StateManager_Init)
 <LI><a href="#[77]">Back_endB2_StateFunc</a> from commander.o(.text.Back_endB2_StateFunc) referenced 2 times from commander.o(.text.motion_StateManager_Init)
 <LI><a href="#[7b]">Back_endB3_StateFunc</a> from commander.o(.text.Back_endB3_StateFunc) referenced 2 times from commander.o(.text.motion_StateManager_Init)
 <LI><a href="#[80]">Back_endC1_StateFunc</a> from commander.o(.text.Back_endC1_StateFunc) referenced 2 times from commander.o(.text.motion_StateManager_Init)
 <LI><a href="#[84]">Back_endC2_StateFunc</a> from commander.o(.text.Back_endC2_StateFunc) referenced 2 times from commander.o(.text.motion_StateManager_Init)
 <LI><a href="#[88]">Back_endC3_StateFunc</a> from commander.o(.text.Back_endC3_StateFunc) referenced 2 times from commander.o(.text.motion_StateManager_Init)
 <LI><a href="#[61]">Begin_StateFunc</a> from commander.o(.text.Begin_StateFunc) referenced 2 times from commander.o(.text.motion_StateManager_Init)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f4xx_it.o(.text.BusFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1e]">CAN1_RX0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1d]">CAN1_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4a]">CAN2_RX0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4b]">CAN2_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4c]">CAN2_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[49]">CAN2_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[62]">CarryA_StateFunc</a> from commander.o(.text.CarryA_StateFunc) referenced 2 times from commander.o(.text.motion_StateManager_Init)
 <LI><a href="#[6f]">CarryB_StateFunc</a> from commander.o(.text.CarryB_StateFunc) referenced 2 times from commander.o(.text.motion_StateManager_Init)
 <LI><a href="#[7c]">CarryC_StateFunc</a> from commander.o(.text.CarryC_StateFunc) referenced 2 times from commander.o(.text.motion_StateManager_Init)
 <LI><a href="#[8a]">ConditionA1</a> from commander.o(.text.ConditionA1) referenced 2 times from commander.o(.text.motion_StateManager_Init)
 <LI><a href="#[8b]">ConditionA2</a> from commander.o(.text.ConditionA2) referenced 2 times from commander.o(.text.motion_StateManager_Init)
 <LI><a href="#[8c]">ConditionA3</a> from commander.o(.text.ConditionA3) referenced 2 times from commander.o(.text.motion_StateManager_Init)
 <LI><a href="#[8d]">ConditionA4</a> from commander.o(.text.ConditionA4) referenced 2 times from commander.o(.text.motion_StateManager_Init)
 <LI><a href="#[8e]">ConditionA5</a> from commander.o(.text.ConditionA5) referenced 2 times from commander.o(.text.motion_StateManager_Init)
 <LI><a href="#[8f]">ConditionA6</a> from commander.o(.text.ConditionA6) referenced 2 times from commander.o(.text.motion_StateManager_Init)
 <LI><a href="#[90]">ConditionB3</a> from commander.o(.text.ConditionB3) referenced 2 times from commander.o(.text.motion_StateManager_Init)
 <LI><a href="#[91]">ConditionB6</a> from commander.o(.text.ConditionB6) referenced 2 times from commander.o(.text.motion_StateManager_Init)
 <LI><a href="#[92]">ConditionC3</a> from commander.o(.text.ConditionC3) referenced 2 times from commander.o(.text.motion_StateManager_Init)
 <LI><a href="#[93]">ConditionC6</a> from commander.o(.text.ConditionC6) referenced 2 times from commander.o(.text.motion_StateManager_Init)
 <LI><a href="#[58]">DCMI_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[15]">DMA1_Stream0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[16]">DMA1_Stream1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[17]">DMA1_Stream2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[18]">DMA1_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[39]">DMA1_Stream7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[42]">DMA2_Stream0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[43]">DMA2_Stream1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[44]">DMA2_Stream2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[45]">DMA2_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[46]">DMA2_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4e]">DMA2_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4f]">DMA2_Stream6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[50]">DMA2_Stream7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f4xx_it.o(.text.DebugMon_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[63]">Delivery_beginA1_StateFunc</a> from commander.o(.text.Delivery_beginA1_StateFunc) referenced 2 times from commander.o(.text.motion_StateManager_Init)
 <LI><a href="#[67]">Delivery_beginA2_StateFunc</a> from commander.o(.text.Delivery_beginA2_StateFunc) referenced 2 times from commander.o(.text.motion_StateManager_Init)
 <LI><a href="#[6b]">Delivery_beginA3_StateFunc</a> from commander.o(.text.Delivery_beginA3_StateFunc) referenced 2 times from commander.o(.text.motion_StateManager_Init)
 <LI><a href="#[70]">Delivery_beginB1_StateFunc</a> from commander.o(.text.Delivery_beginB1_StateFunc) referenced 2 times from commander.o(.text.motion_StateManager_Init)
 <LI><a href="#[74]">Delivery_beginB2_StateFunc</a> from commander.o(.text.Delivery_beginB2_StateFunc) referenced 2 times from commander.o(.text.motion_StateManager_Init)
 <LI><a href="#[78]">Delivery_beginB3_StateFunc</a> from commander.o(.text.Delivery_beginB3_StateFunc) referenced 2 times from commander.o(.text.motion_StateManager_Init)
 <LI><a href="#[7d]">Delivery_beginC1_StateFunc</a> from commander.o(.text.Delivery_beginC1_StateFunc) referenced 2 times from commander.o(.text.motion_StateManager_Init)
 <LI><a href="#[81]">Delivery_beginC2_StateFunc</a> from commander.o(.text.Delivery_beginC2_StateFunc) referenced 2 times from commander.o(.text.motion_StateManager_Init)
 <LI><a href="#[85]">Delivery_beginC3_StateFunc</a> from commander.o(.text.Delivery_beginC3_StateFunc) referenced 2 times from commander.o(.text.motion_StateManager_Init)
 <LI><a href="#[64]">Delivery_endA1_StateFunc</a> from commander.o(.text.Delivery_endA1_StateFunc) referenced 2 times from commander.o(.text.motion_StateManager_Init)
 <LI><a href="#[68]">Delivery_endA2_StateFunc</a> from commander.o(.text.Delivery_endA2_StateFunc) referenced 2 times from commander.o(.text.motion_StateManager_Init)
 <LI><a href="#[6c]">Delivery_endA3_StateFunc</a> from commander.o(.text.Delivery_endA3_StateFunc) referenced 2 times from commander.o(.text.motion_StateManager_Init)
 <LI><a href="#[71]">Delivery_endB1_StateFunc</a> from commander.o(.text.Delivery_endB1_StateFunc) referenced 2 times from commander.o(.text.motion_StateManager_Init)
 <LI><a href="#[75]">Delivery_endB2_StateFunc</a> from commander.o(.text.Delivery_endB2_StateFunc) referenced 2 times from commander.o(.text.motion_StateManager_Init)
 <LI><a href="#[79]">Delivery_endB3_StateFunc</a> from commander.o(.text.Delivery_endB3_StateFunc) referenced 2 times from commander.o(.text.motion_StateManager_Init)
 <LI><a href="#[7e]">Delivery_endC1_StateFunc</a> from commander.o(.text.Delivery_endC1_StateFunc) referenced 2 times from commander.o(.text.motion_StateManager_Init)
 <LI><a href="#[82]">Delivery_endC2_StateFunc</a> from commander.o(.text.Delivery_endC2_StateFunc) referenced 2 times from commander.o(.text.motion_StateManager_Init)
 <LI><a href="#[86]">Delivery_endC3_StateFunc</a> from commander.o(.text.Delivery_endC3_StateFunc) referenced 2 times from commander.o(.text.motion_StateManager_Init)
 <LI><a href="#[47]">ETH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[48]">ETH_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3a]">FMC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5a]">FPU_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[59]">HASH_RNG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f4xx_it.o(.text.HardFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[53]">I2C3_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[52]">I2C3_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f4xx_it.o(.text.MemManage_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f4xx_it.o(.text.NMI_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4d]">OTG_FS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[34]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[55]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[54]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[57]">OTG_HS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[56]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from port.o(.text.PendSV_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from port.o(.text.SVC_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5e]">StartDefaultTask</a> from freertos.o(.text.StartDefaultTask) referenced from freertos.o(.text.MX_FREERTOS_Init)
 <LI><a href="#[89]">Stop_mode_StateFunc</a> from commander.o(.text.Stop_mode_StateFunc) referenced 2 times from commander.o(.text.motion_StateManager_Init)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32f4xx_it.o(.text.SysTick_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5c]">SystemInit</a> from system_stm32f4xx.o(.text.SystemInit) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[c]">TAMP_STAMP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[23]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from stm32f4xx_it.o(.text.TIM4_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[40]">TIM6_DAC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[36]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[51]">USART6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f4xx_it.o(.text.UsageFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5d]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[5b]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[5f]">motion_process_task</a> from maintask.o(.text.motion_process_task) referenced 2 times from maintask.o(.text.main_task_create)
 <LI><a href="#[95]">prvIdleTask</a> from tasks.o(.text.prvIdleTask) referenced 2 times from tasks.o(.text.vTaskStartScheduler)
 <LI><a href="#[94]">prvTaskExitError</a> from port.o(.text.prvTaskExitError) referenced 2 times from port.o(.text.pxPortInitialiseStack)
 <LI><a href="#[60]">sensor_process_task</a> from maintask.o(.text.sensor_process_task) referenced 2 times from maintask.o(.text.main_task_create)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[5d]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[120]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[96]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[a1]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[121]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[122]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[123]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[124]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[125]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[11e]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>

<P><STRONG><a name="[126]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[127]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[9b]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Siganmove
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_speed_pos_target
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_speed_target
</UL>

<P><STRONG><a name="[9d]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_speed_pos_target
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_speed_target
</UL>

<P><STRONG><a name="[9f]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_speed_pos_target
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_speed_target
</UL>

<P><STRONG><a name="[a0]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Siganmove
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_speed_pos_target
</UL>

<P><STRONG><a name="[f0]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Siganmove
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_speed_pos_target
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_speed_target
</UL>

<P><STRONG><a name="[9a]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[128]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[99]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[129]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[12a]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[9e]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[9c]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[97]"></a>__scatterload</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[12b]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[65]"></a>Back_beginA1_StateFunc</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, commander.o(.text.Back_beginA1_StateFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Back_beginA1_StateFunc &rArr; niMotorangle &rArr; set_speed_pos_target &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;niMotorangle
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motorangle
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Left_Position
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Forward_Position
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineTracking
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commander.o(.text.motion_StateManager_Init)
</UL>
<P><STRONG><a name="[69]"></a>Back_beginA2_StateFunc</STRONG> (Thumb, 264 bytes, Stack size 16 bytes, commander.o(.text.Back_beginA2_StateFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Back_beginA2_StateFunc &rArr; niMotorangle &rArr; set_speed_pos_target &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;niMotorangle
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motorangle
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Backward_Position
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineTracking
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commander.o(.text.motion_StateManager_Init)
</UL>
<P><STRONG><a name="[6d]"></a>Back_beginA3_StateFunc</STRONG> (Thumb, 372 bytes, Stack size 16 bytes, commander.o(.text.Back_beginA3_StateFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Back_beginA3_StateFunc &rArr; niMotorangle &rArr; set_speed_pos_target &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Solenoid_Close
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;niMotorangle
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motorangle
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Left_Position
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Forward_Position
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineTracking
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commander.o(.text.motion_StateManager_Init)
</UL>
<P><STRONG><a name="[72]"></a>Back_beginB1_StateFunc</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, commander.o(.text.Back_beginB1_StateFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Back_beginB1_StateFunc &rArr; niMotorangle &rArr; set_speed_pos_target &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;niMotorangle
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motorangle
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Forward_Position
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineTracking
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commander.o(.text.motion_StateManager_Init)
</UL>
<P><STRONG><a name="[76]"></a>Back_beginB2_StateFunc</STRONG> (Thumb, 316 bytes, Stack size 16 bytes, commander.o(.text.Back_beginB2_StateFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Back_beginB2_StateFunc &rArr; niMotorangle &rArr; set_speed_pos_target &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;niMotorangle
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motorangle
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Right_Position
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Backward_Position
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Forward_Position
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineTracking
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commander.o(.text.motion_StateManager_Init)
</UL>
<P><STRONG><a name="[7a]"></a>Back_beginB3_StateFunc</STRONG> (Thumb, 420 bytes, Stack size 16 bytes, commander.o(.text.Back_beginB3_StateFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Back_beginB3_StateFunc &rArr; niMotorangle &rArr; set_speed_pos_target &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Solenoid_Close
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;niMotorangle
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motorangle
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Left_Position
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Right_Position
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Forward_Position
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineTracking
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commander.o(.text.motion_StateManager_Init)
</UL>
<P><STRONG><a name="[7f]"></a>Back_beginC1_StateFunc</STRONG> (Thumb, 320 bytes, Stack size 24 bytes, commander.o(.text.Back_beginC1_StateFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Back_beginC1_StateFunc &rArr; niMotorangle &rArr; set_speed_pos_target &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;niMotorangle
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motorangle
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Forward_Position
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineTracking
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commander.o(.text.motion_StateManager_Init)
</UL>
<P><STRONG><a name="[83]"></a>Back_beginC2_StateFunc</STRONG> (Thumb, 328 bytes, Stack size 16 bytes, commander.o(.text.Back_beginC2_StateFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Back_beginC2_StateFunc &rArr; niMotorangle &rArr; set_speed_pos_target &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;niMotorangle
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motorangle
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Left_Position
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Forward_Position
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineTracking
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commander.o(.text.motion_StateManager_Init)
</UL>
<P><STRONG><a name="[87]"></a>Back_beginC3_StateFunc</STRONG> (Thumb, 420 bytes, Stack size 16 bytes, commander.o(.text.Back_beginC3_StateFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Back_beginC3_StateFunc &rArr; niMotorangle &rArr; set_speed_pos_target &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;niMotorangle
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motorangle
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Left_Position
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Forward_Position
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineTracking
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commander.o(.text.motion_StateManager_Init)
</UL>
<P><STRONG><a name="[66]"></a>Back_endA1_StateFunc</STRONG> (Thumb, 280 bytes, Stack size 8 bytes, commander.o(.text.Back_endA1_StateFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Back_endA1_StateFunc &rArr; Sigancatch &rArr; Read_RGB_HSL &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Solenoid_Close
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Yuntai_set_Angle
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motorangle
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Left_Position
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Right_Position
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Forward_Position
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sigancatch
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Siganmove
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pump_Open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commander.o(.text.motion_StateManager_Init)
</UL>
<P><STRONG><a name="[6a]"></a>Back_endA2_StateFunc</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, commander.o(.text.Back_endA2_StateFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Back_endA2_StateFunc &rArr; Sigancatch &rArr; Read_RGB_HSL &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Solenoid_Close
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Yuntai_set_Angle
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motorangle
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Left_Position
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Right_Position
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Forward_Position
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sigancatch
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Siganmove
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pump_Open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commander.o(.text.motion_StateManager_Init)
</UL>
<P><STRONG><a name="[6e]"></a>Back_endA3_StateFunc</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, commander.o(.text.Back_endA3_StateFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Back_endA3_StateFunc &rArr; Sigancatch &rArr; Read_RGB_HSL &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Solenoid_Close
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Yuntai_set_Angle
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motorangle
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Left_Position
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Right_Position
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Forward_Position
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sigancatch
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Siganmove
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pump_Open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commander.o(.text.motion_StateManager_Init)
</UL>
<P><STRONG><a name="[73]"></a>Back_endB1_StateFunc</STRONG> (Thumb, 260 bytes, Stack size 16 bytes, commander.o(.text.Back_endB1_StateFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Back_endB1_StateFunc &rArr; Sigancatch &rArr; Read_RGB_HSL &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Solenoid_Close
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pump_Close
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Yuntai_set_Angle
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Left_Position
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Right_Position
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Backward_Position
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sigancatch
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Siganmove
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Solenoid_Open
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pump_Open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commander.o(.text.motion_StateManager_Init)
</UL>
<P><STRONG><a name="[77]"></a>Back_endB2_StateFunc</STRONG> (Thumb, 300 bytes, Stack size 24 bytes, commander.o(.text.Back_endB2_StateFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Back_endB2_StateFunc &rArr; Sigancatch &rArr; Read_RGB_HSL &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Solenoid_Close
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pump_Close
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Yuntai_set_Angle
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Left_Position
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Right_Position
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Backward_Position
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Forward_Position
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sigancatch
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Siganmove
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Solenoid_Open
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pump_Open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commander.o(.text.motion_StateManager_Init)
</UL>
<P><STRONG><a name="[7b]"></a>Back_endB3_StateFunc</STRONG> (Thumb, 300 bytes, Stack size 24 bytes, commander.o(.text.Back_endB3_StateFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Back_endB3_StateFunc &rArr; Sigancatch &rArr; Read_RGB_HSL &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Solenoid_Close
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pump_Close
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Yuntai_set_Angle
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Left_Position
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Right_Position
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Backward_Position
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Forward_Position
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sigancatch
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Siganmove
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Solenoid_Open
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pump_Open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commander.o(.text.motion_StateManager_Init)
</UL>
<P><STRONG><a name="[80]"></a>Back_endC1_StateFunc</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, commander.o(.text.Back_endC1_StateFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Back_endC1_StateFunc &rArr; Sigancatch &rArr; Read_RGB_HSL &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Solenoid_Close
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pump_Close
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Yuntai_set_Angle
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motorangle
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Left_Position
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Right_Position
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Backward_Position
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Forward_Position
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sigancatch
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Siganmove
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Solenoid_Open
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pump_Open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commander.o(.text.motion_StateManager_Init)
</UL>
<P><STRONG><a name="[84]"></a>Back_endC2_StateFunc</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, commander.o(.text.Back_endC2_StateFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Back_endC2_StateFunc &rArr; Sigancatch &rArr; Read_RGB_HSL &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Solenoid_Close
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pump_Close
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Yuntai_set_Angle
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motorangle
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Left_Position
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Right_Position
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Backward_Position
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Forward_Position
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sigancatch
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Siganmove
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Solenoid_Open
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pump_Open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commander.o(.text.motion_StateManager_Init)
</UL>
<P><STRONG><a name="[88]"></a>Back_endC3_StateFunc</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, commander.o(.text.Back_endC3_StateFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Back_endC3_StateFunc &rArr; Sigancatch &rArr; Read_RGB_HSL &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Solenoid_Close
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pump_Close
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Yuntai_set_Angle
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motorangle
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Left_Position
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Right_Position
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Backward_Position
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Forward_Position
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sigancatch
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Siganmove
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Solenoid_Open
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pump_Open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commander.o(.text.motion_StateManager_Init)
</UL>
<P><STRONG><a name="[61]"></a>Begin_StateFunc</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, commander.o(.text.Begin_StateFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Begin_StateFunc &rArr; LineTracking &rArr; set_speed_target &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineTracking
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commander.o(.text.motion_StateManager_Init)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>CarryA_StateFunc</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, commander.o(.text.CarryA_StateFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = CarryA_StateFunc &rArr; Sigancatch &rArr; Read_RGB_HSL &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Solenoid_Close
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motorangle
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Left_Position
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Right_Position
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Backward_Position
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sigancatch
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Siganmove
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pump_Open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commander.o(.text.motion_StateManager_Init)
</UL>
<P><STRONG><a name="[6f]"></a>CarryB_StateFunc</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, commander.o(.text.CarryB_StateFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = CarryB_StateFunc &rArr; Sigancatch &rArr; Read_RGB_HSL &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Solenoid_Close
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Forward_Position
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sigancatch
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Siganmove
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pump_Open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commander.o(.text.motion_StateManager_Init)
</UL>
<P><STRONG><a name="[7c]"></a>CarryC_StateFunc</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, commander.o(.text.CarryC_StateFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = CarryC_StateFunc &rArr; Sigancatch &rArr; Read_RGB_HSL &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Solenoid_Close
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motorangle
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Left_Position
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Right_Position
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Backward_Position
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Forward_Position
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sigancatch
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Siganmove
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pump_Open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commander.o(.text.motion_StateManager_Init)
</UL>
<P><STRONG><a name="[8a]"></a>ConditionA1</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, commander.o(.text.ConditionA1))
<BR>[Address Reference Count : 1]<UL><LI> commander.o(.text.motion_StateManager_Init)
</UL>
<P><STRONG><a name="[8b]"></a>ConditionA2</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, commander.o(.text.ConditionA2))
<BR>[Address Reference Count : 1]<UL><LI> commander.o(.text.motion_StateManager_Init)
</UL>
<P><STRONG><a name="[8c]"></a>ConditionA3</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, commander.o(.text.ConditionA3))
<BR>[Address Reference Count : 1]<UL><LI> commander.o(.text.motion_StateManager_Init)
</UL>
<P><STRONG><a name="[8d]"></a>ConditionA4</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, commander.o(.text.ConditionA4))
<BR>[Address Reference Count : 1]<UL><LI> commander.o(.text.motion_StateManager_Init)
</UL>
<P><STRONG><a name="[8e]"></a>ConditionA5</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, commander.o(.text.ConditionA5))
<BR>[Address Reference Count : 1]<UL><LI> commander.o(.text.motion_StateManager_Init)
</UL>
<P><STRONG><a name="[8f]"></a>ConditionA6</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, commander.o(.text.ConditionA6))
<BR>[Address Reference Count : 1]<UL><LI> commander.o(.text.motion_StateManager_Init)
</UL>
<P><STRONG><a name="[90]"></a>ConditionB3</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, commander.o(.text.ConditionB3))
<BR>[Address Reference Count : 1]<UL><LI> commander.o(.text.motion_StateManager_Init)
</UL>
<P><STRONG><a name="[91]"></a>ConditionB6</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, commander.o(.text.ConditionB6))
<BR>[Address Reference Count : 1]<UL><LI> commander.o(.text.motion_StateManager_Init)
</UL>
<P><STRONG><a name="[92]"></a>ConditionC3</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, commander.o(.text.ConditionC3))
<BR>[Address Reference Count : 1]<UL><LI> commander.o(.text.motion_StateManager_Init)
</UL>
<P><STRONG><a name="[93]"></a>ConditionC6</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, commander.o(.text.ConditionC6))
<BR>[Address Reference Count : 1]<UL><LI> commander.o(.text.motion_StateManager_Init)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>Delivery_beginA1_StateFunc</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, commander.o(.text.Delivery_beginA1_StateFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Delivery_beginA1_StateFunc &rArr; niMotorangle &rArr; set_speed_pos_target &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;niMotorangle
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Right_Position
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Forward_Position
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineTracking
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commander.o(.text.motion_StateManager_Init)
</UL>
<P><STRONG><a name="[67]"></a>Delivery_beginA2_StateFunc</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, commander.o(.text.Delivery_beginA2_StateFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Delivery_beginA2_StateFunc &rArr; niMotorangle &rArr; set_speed_pos_target &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;niMotorangle
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Forward_Position
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineTracking
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commander.o(.text.motion_StateManager_Init)
</UL>
<P><STRONG><a name="[6b]"></a>Delivery_beginA3_StateFunc</STRONG> (Thumb, 284 bytes, Stack size 32 bytes, commander.o(.text.Delivery_beginA3_StateFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Delivery_beginA3_StateFunc &rArr; niMotorangle &rArr; set_speed_pos_target &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;niMotorangle
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Left_Position
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Forward_Position
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineTracking
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commander.o(.text.motion_StateManager_Init)
</UL>
<P><STRONG><a name="[70]"></a>Delivery_beginB1_StateFunc</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, commander.o(.text.Delivery_beginB1_StateFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Delivery_beginB1_StateFunc &rArr; niMotorangle &rArr; set_speed_pos_target &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;niMotorangle
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motorangle
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Backward_Position
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Forward_Position
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineTracking
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commander.o(.text.motion_StateManager_Init)
</UL>
<P><STRONG><a name="[74]"></a>Delivery_beginB2_StateFunc</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, commander.o(.text.Delivery_beginB2_StateFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Delivery_beginB2_StateFunc &rArr; niMotorangle &rArr; set_speed_pos_target &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;niMotorangle
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motorangle
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Left_Position
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Forward_Position
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineTracking
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commander.o(.text.motion_StateManager_Init)
</UL>
<P><STRONG><a name="[78]"></a>Delivery_beginB3_StateFunc</STRONG> (Thumb, 336 bytes, Stack size 32 bytes, commander.o(.text.Delivery_beginB3_StateFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Delivery_beginB3_StateFunc &rArr; niMotorangle &rArr; set_speed_pos_target &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;niMotorangle
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motorangle
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Left_Position
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Forward_Position
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineTracking
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commander.o(.text.motion_StateManager_Init)
</UL>
<P><STRONG><a name="[7d]"></a>Delivery_beginC1_StateFunc</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, commander.o(.text.Delivery_beginC1_StateFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Delivery_beginC1_StateFunc &rArr; niMotorangle &rArr; set_speed_pos_target &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;niMotorangle
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motorangle
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Forward_Position
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineTracking
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commander.o(.text.motion_StateManager_Init)
</UL>
<P><STRONG><a name="[81]"></a>Delivery_beginC2_StateFunc</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, commander.o(.text.Delivery_beginC2_StateFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Delivery_beginC2_StateFunc &rArr; Motorangle &rArr; set_speed_pos_target &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motorangle
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Right_Position
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Forward_Position
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineTracking
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commander.o(.text.motion_StateManager_Init)
</UL>
<P><STRONG><a name="[85]"></a>Delivery_beginC3_StateFunc</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, commander.o(.text.Delivery_beginC3_StateFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Delivery_beginC3_StateFunc &rArr; Move_Right_Position &rArr; set_speed_pos_target &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Right_Position
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Forward_Position
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineTracking
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commander.o(.text.motion_StateManager_Init)
</UL>
<P><STRONG><a name="[64]"></a>Delivery_endA1_StateFunc</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, commander.o(.text.Delivery_endA1_StateFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Delivery_endA1_StateFunc &rArr; Move_Backward_Position &rArr; set_speed_pos_target &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pump_Close
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Yuntai_set_Angle
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Backward_Position
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Forward_Position
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Solenoid_Open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commander.o(.text.motion_StateManager_Init)
</UL>
<P><STRONG><a name="[68]"></a>Delivery_endA2_StateFunc</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, commander.o(.text.Delivery_endA2_StateFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Delivery_endA2_StateFunc &rArr; Move_Backward_Position &rArr; set_speed_pos_target &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pump_Close
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Yuntai_set_Angle
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Backward_Position
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Forward_Position
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Solenoid_Open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commander.o(.text.motion_StateManager_Init)
</UL>
<P><STRONG><a name="[6c]"></a>Delivery_endA3_StateFunc</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, commander.o(.text.Delivery_endA3_StateFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Delivery_endA3_StateFunc &rArr; Move_Backward_Position &rArr; set_speed_pos_target &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pump_Close
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Yuntai_set_Angle
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Backward_Position
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Forward_Position
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Solenoid_Open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commander.o(.text.motion_StateManager_Init)
</UL>
<P><STRONG><a name="[71]"></a>Delivery_endB1_StateFunc</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, commander.o(.text.Delivery_endB1_StateFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Delivery_endB1_StateFunc &rArr; Move_Backward_Position &rArr; set_speed_pos_target &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pump_Close
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Yuntai_set_Angle
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Backward_Position
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Forward_Position
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Solenoid_Open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commander.o(.text.motion_StateManager_Init)
</UL>
<P><STRONG><a name="[75]"></a>Delivery_endB2_StateFunc</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, commander.o(.text.Delivery_endB2_StateFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Delivery_endB2_StateFunc &rArr; Move_Backward_Position &rArr; set_speed_pos_target &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pump_Close
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Yuntai_set_Angle
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Backward_Position
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Forward_Position
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Solenoid_Open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commander.o(.text.motion_StateManager_Init)
</UL>
<P><STRONG><a name="[79]"></a>Delivery_endB3_StateFunc</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, commander.o(.text.Delivery_endB3_StateFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Delivery_endB3_StateFunc &rArr; Move_Backward_Position &rArr; set_speed_pos_target &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pump_Close
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Yuntai_set_Angle
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Backward_Position
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Forward_Position
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Solenoid_Open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commander.o(.text.motion_StateManager_Init)
</UL>
<P><STRONG><a name="[7e]"></a>Delivery_endC1_StateFunc</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, commander.o(.text.Delivery_endC1_StateFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Delivery_endC1_StateFunc &rArr; Move_Backward_Position &rArr; set_speed_pos_target &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pump_Close
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Yuntai_set_Angle
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Backward_Position
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Forward_Position
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Solenoid_Open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commander.o(.text.motion_StateManager_Init)
</UL>
<P><STRONG><a name="[82]"></a>Delivery_endC2_StateFunc</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, commander.o(.text.Delivery_endC2_StateFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Delivery_endC2_StateFunc &rArr; Move_Backward_Position &rArr; set_speed_pos_target &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pump_Close
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Yuntai_set_Angle
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Backward_Position
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Forward_Position
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Solenoid_Open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commander.o(.text.motion_StateManager_Init)
</UL>
<P><STRONG><a name="[86]"></a>Delivery_endC3_StateFunc</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, commander.o(.text.Delivery_endC3_StateFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Delivery_endC3_StateFunc &rArr; Move_Backward_Position &rArr; set_speed_pos_target &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pump_Close
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Yuntai_set_Angle
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Backward_Position
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Forward_Position
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Solenoid_Open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commander.o(.text.motion_StateManager_Init)
</UL>
<P><STRONG><a name="[e0]"></a>Error_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM6_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C2_Init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C3_Init
</UL>

<P><STRONG><a name="[d9]"></a>Get_Black_Line_Position</STRONG> (Thumb, 356 bytes, Stack size 20 bytes, motor.o(.text.Get_Black_Line_Position))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Get_Black_Line_Position
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineTracking
</UL>

<P><STRONG><a name="[b2]"></a>HAL_Delay</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32f4xx_hal.o(.text.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bb]"></a>HAL_GPIO_Init</STRONG> (Thumb, 414 bytes, Stack size 44 bytes, stm32f4xx_hal_gpio.o(.text.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[de]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(.text.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[b3]"></a>HAL_GetTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[b4]"></a>HAL_I2C_Init</STRONG> (Thumb, 356 bytes, Stack size 24 bytes, stm32f4xx_hal_i2c.o(.text.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C2_Init
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C3_Init
</UL>

<P><STRONG><a name="[b7]"></a>HAL_I2C_Mem_Read</STRONG> (Thumb, 600 bytes, Stack size 48 bytes, stm32f4xx_hal_i2c.o(.text.HAL_I2C_Mem_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_All_GRAY_Digital
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_RGB_HSL
</UL>

<P><STRONG><a name="[b5]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 272 bytes, Stack size 56 bytes, i2c.o(.text.HAL_I2C_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[f2]"></a>HAL_IncTick</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[bc]"></a>HAL_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_hal.o(.text.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[be]"></a>HAL_InitTick</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f4xx_hal.o(.text.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[bf]"></a>HAL_MspInit</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, stm32f4xx_hal_msp.o(.text.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[c8]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>

<P><STRONG><a name="[c1]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(.text.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>

<P><STRONG><a name="[bd]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[c2]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 356 bytes, Stack size 24 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[b6]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[f6]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[c3]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[c4]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 944 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[c0]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text.HAL_SYSTICK_Config))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[ce]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(.text.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[d0]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(.text.HAL_TIMEx_CommutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[e4]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 186 bytes, Stack size 8 bytes, stm32f4xx_hal_tim_ex.o(.text.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM6_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[c5]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM6_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[c6]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, tim.o(.text.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[fc]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 170 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e3]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 416 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_ConfigClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_ConfigClockSource
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[ca]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[c9]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 334 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[cb]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[e5]"></a>HAL_TIM_PWM_ConfigChannel</STRONG> (Thumb, 548 bytes, Stack size 28 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_PWM_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_PWM_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[d1]"></a>HAL_TIM_PWM_Init</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_PWM_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[d2]"></a>HAL_TIM_PWM_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_PWM_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
</UL>

<P><STRONG><a name="[cc]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[fd]"></a>HAL_TIM_PWM_Start</STRONG> (Thumb, 286 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_PWM_Start))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cd]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[cf]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[d3]"></a>HAL_UART_Init</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(.text.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
</UL>

<P><STRONG><a name="[d4]"></a>HAL_UART_MspInit</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, usart.o(.text.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[d6]"></a>HAL_UART_Transmit</STRONG> (Thumb, 376 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(.text.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_UART_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_speed_pos_target
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_speed_target
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[a6]"></a>LineTracking</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, motor.o(.text.LineTracking))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LineTracking &rArr; set_speed_target &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Black_Line_Position
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_speed_target
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_beginC3_StateFunc
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_beginC3_StateFunc
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_beginC2_StateFunc
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_beginC2_StateFunc
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_beginC1_StateFunc
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_beginC1_StateFunc
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_beginB3_StateFunc
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_beginB3_StateFunc
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_beginB2_StateFunc
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_beginB2_StateFunc
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_beginB1_StateFunc
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_beginB1_StateFunc
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_beginA3_StateFunc
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_beginA3_StateFunc
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_beginA2_StateFunc
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_beginA2_StateFunc
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_beginA1_StateFunc
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_beginA1_StateFunc
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Begin_StateFunc
</UL>

<P><STRONG><a name="[db]"></a>MX_FREERTOS_Init</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, freertos.o(.text.MX_FREERTOS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = MX_FREERTOS_Init &rArr; osThreadCreate &rArr; xTaskCreate &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dd]"></a>MX_GPIO_Init</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, gpio.o(.text.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[df]"></a>MX_I2C2_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, i2c.o(.text.MX_I2C2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = MX_I2C2_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e1]"></a>MX_I2C3_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, i2c.o(.text.MX_I2C3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = MX_I2C3_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e2]"></a>MX_TIM2_Init</STRONG> (Thumb, 356 bytes, Stack size 88 bytes, tim.o(.text.MX_TIM2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = MX_TIM2_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e6]"></a>MX_TIM3_Init</STRONG> (Thumb, 350 bytes, Stack size 96 bytes, tim.o(.text.MX_TIM3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = MX_TIM3_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e7]"></a>MX_TIM4_Init</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, tim.o(.text.MX_TIM4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MX_TIM4_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e8]"></a>MX_TIM5_Init</STRONG> (Thumb, 350 bytes, Stack size 96 bytes, tim.o(.text.MX_TIM5_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = MX_TIM5_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e9]"></a>MX_TIM6_Init</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, tim.o(.text.MX_TIM6_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MX_TIM6_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ea]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, usart.o(.text.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[eb]"></a>MX_USART2_UART_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, usart.o(.text.MX_USART2_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MX_USART2_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[a8]"></a>Motorangle</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, motor.o(.text.Motorangle))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Motorangle &rArr; set_speed_pos_target &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_speed_pos_target
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endC3_StateFunc
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_beginC3_StateFunc
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endC2_StateFunc
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_beginC2_StateFunc
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_beginC2_StateFunc
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endC1_StateFunc
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_beginC1_StateFunc
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_beginC1_StateFunc
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarryC_StateFunc
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_beginB3_StateFunc
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_beginB3_StateFunc
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_beginB2_StateFunc
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_beginB2_StateFunc
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_beginB1_StateFunc
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_beginB1_StateFunc
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endA3_StateFunc
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_beginA3_StateFunc
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endA2_StateFunc
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_beginA2_StateFunc
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endA1_StateFunc
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_beginA1_StateFunc
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarryA_StateFunc
</UL>

<P><STRONG><a name="[a9]"></a>Move_Backward_Position</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, motor.o(.text.Move_Backward_Position))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Move_Backward_Position &rArr; set_speed_pos_target &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_speed_pos_target
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endC3_StateFunc
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_endC3_StateFunc
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endC2_StateFunc
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_endC2_StateFunc
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endC1_StateFunc
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_endC1_StateFunc
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarryC_StateFunc
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endB3_StateFunc
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_endB3_StateFunc
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endB2_StateFunc
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_beginB2_StateFunc
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_endB2_StateFunc
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endB1_StateFunc
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_endB1_StateFunc
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_beginB1_StateFunc
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_endA3_StateFunc
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_beginA2_StateFunc
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_endA2_StateFunc
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_endA1_StateFunc
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarryA_StateFunc
</UL>

<P><STRONG><a name="[a4]"></a>Move_Forward_Position</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, motor.o(.text.Move_Forward_Position))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Move_Forward_Position &rArr; set_speed_pos_target &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_speed_pos_target
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endC3_StateFunc
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_beginC3_StateFunc
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_endC3_StateFunc
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_beginC3_StateFunc
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endC2_StateFunc
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_beginC2_StateFunc
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_endC2_StateFunc
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_beginC2_StateFunc
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endC1_StateFunc
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_beginC1_StateFunc
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_endC1_StateFunc
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_beginC1_StateFunc
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarryC_StateFunc
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endB3_StateFunc
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_beginB3_StateFunc
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_endB3_StateFunc
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_beginB3_StateFunc
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endB2_StateFunc
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_beginB2_StateFunc
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_endB2_StateFunc
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_beginB2_StateFunc
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_beginB1_StateFunc
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_endB1_StateFunc
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_beginB1_StateFunc
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarryB_StateFunc
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endA3_StateFunc
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_beginA3_StateFunc
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_endA3_StateFunc
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_beginA3_StateFunc
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endA2_StateFunc
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_endA2_StateFunc
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_beginA2_StateFunc
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endA1_StateFunc
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_beginA1_StateFunc
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_endA1_StateFunc
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_beginA1_StateFunc
</UL>

<P><STRONG><a name="[a5]"></a>Move_Left_Position</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, motor.o(.text.Move_Left_Position))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Move_Left_Position &rArr; set_speed_pos_target &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_speed_pos_target
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endC3_StateFunc
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_beginC3_StateFunc
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endC2_StateFunc
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_beginC2_StateFunc
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endC1_StateFunc
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarryC_StateFunc
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endB3_StateFunc
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_beginB3_StateFunc
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_beginB3_StateFunc
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endB2_StateFunc
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_beginB2_StateFunc
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endB1_StateFunc
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endA3_StateFunc
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_beginA3_StateFunc
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_beginA3_StateFunc
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endA2_StateFunc
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endA1_StateFunc
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_beginA1_StateFunc
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarryA_StateFunc
</UL>

<P><STRONG><a name="[ab]"></a>Move_Right_Position</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, motor.o(.text.Move_Right_Position))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Move_Right_Position &rArr; set_speed_pos_target &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_speed_pos_target
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endC3_StateFunc
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_beginC3_StateFunc
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endC2_StateFunc
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_beginC2_StateFunc
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endC1_StateFunc
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarryC_StateFunc
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endB3_StateFunc
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_beginB3_StateFunc
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endB2_StateFunc
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_beginB2_StateFunc
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endB1_StateFunc
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endA3_StateFunc
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endA2_StateFunc
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endA1_StateFunc
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_beginA1_StateFunc
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarryA_StateFunc
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.NMI_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, port.o(.text.PendSV_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[b0]"></a>Pump_Close</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, steering gear control.o(.text.Pump_Close))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task_create
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endC3_StateFunc
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_endC3_StateFunc
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endC2_StateFunc
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_endC2_StateFunc
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endC1_StateFunc
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_endC1_StateFunc
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endB3_StateFunc
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_endB3_StateFunc
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endB2_StateFunc
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_endB2_StateFunc
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endB1_StateFunc
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_endB1_StateFunc
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_endA3_StateFunc
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_endA2_StateFunc
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_endA1_StateFunc
</UL>

<P><STRONG><a name="[ad]"></a>Pump_Open</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, steering gear control.o(.text.Pump_Open))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endC3_StateFunc
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endC2_StateFunc
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endC1_StateFunc
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarryC_StateFunc
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endB3_StateFunc
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endB2_StateFunc
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endB1_StateFunc
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarryB_StateFunc
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endA3_StateFunc
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endA2_StateFunc
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endA1_StateFunc
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarryA_StateFunc
</UL>

<P><STRONG><a name="[ee]"></a>Read_All_GRAY_Digital</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, hardware_iic.o(.text.Read_All_GRAY_Digital))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Read_All_GRAY_Digital &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_process_task
</UL>

<P><STRONG><a name="[ef]"></a>Read_RGB_HSL</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, hardware_iic.o(.text.Read_RGB_HSL))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Read_RGB_HSL &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_process_task
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sigancatch
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[ae]"></a>Sigancatch</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, steering gear control.o(.text.Sigancatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Sigancatch &rArr; Read_RGB_HSL &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_RGB_HSL
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endC3_StateFunc
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endC2_StateFunc
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endC1_StateFunc
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarryC_StateFunc
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endB3_StateFunc
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endB2_StateFunc
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endB1_StateFunc
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarryB_StateFunc
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endA3_StateFunc
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endA2_StateFunc
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endA1_StateFunc
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarryA_StateFunc
</UL>

<P><STRONG><a name="[af]"></a>Siganmove</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, steering gear control.o(.text.Siganmove))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Siganmove &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endC3_StateFunc
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endC2_StateFunc
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endC1_StateFunc
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarryC_StateFunc
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endB3_StateFunc
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endB2_StateFunc
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endB1_StateFunc
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarryB_StateFunc
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endA3_StateFunc
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endA2_StateFunc
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endA1_StateFunc
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarryA_StateFunc
</UL>

<P><STRONG><a name="[aa]"></a>Solenoid_Close</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, steering gear control.o(.text.Solenoid_Close))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task_create
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endC3_StateFunc
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endC2_StateFunc
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endC1_StateFunc
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarryC_StateFunc
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endB3_StateFunc
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_beginB3_StateFunc
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endB2_StateFunc
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endB1_StateFunc
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarryB_StateFunc
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endA3_StateFunc
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_beginA3_StateFunc
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endA2_StateFunc
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endA1_StateFunc
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarryA_StateFunc
</UL>

<P><STRONG><a name="[b1]"></a>Solenoid_Open</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, steering gear control.o(.text.Solenoid_Open))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endC3_StateFunc
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_endC3_StateFunc
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endC2_StateFunc
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_endC2_StateFunc
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endC1_StateFunc
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_endC1_StateFunc
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endB3_StateFunc
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_endB3_StateFunc
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endB2_StateFunc
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_endB2_StateFunc
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endB1_StateFunc
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_endB1_StateFunc
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_endA3_StateFunc
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_endA2_StateFunc
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_endA1_StateFunc
</UL>

<P><STRONG><a name="[5e]"></a>StartDefaultTask</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, freertos.o(.text.StartDefaultTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + In Cycle
<LI>Call Chain = StartDefaultTask &rArr;  StartDefaultTask (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.text.MX_FREERTOS_Init)
</UL>
<P><STRONG><a name="[100]"></a>Step_ZDT_Init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, zdtstepmotor.o(.text.Step_ZDT_Init))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task_create
</UL>

<P><STRONG><a name="[a7]"></a>Stop</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, motor.o(.text.Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Stop &rArr; set_speed_target &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_speed_target
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_mode_StateFunc
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_beginC3_StateFunc
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_beginC3_StateFunc
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_beginC2_StateFunc
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_beginC2_StateFunc
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_beginC1_StateFunc
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_beginC1_StateFunc
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_beginB3_StateFunc
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_beginB3_StateFunc
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_beginB2_StateFunc
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_beginB2_StateFunc
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_beginB1_StateFunc
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_beginB1_StateFunc
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_beginA3_StateFunc
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_beginA3_StateFunc
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_beginA2_StateFunc
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_beginA2_StateFunc
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_beginA1_StateFunc
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_beginA1_StateFunc
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Begin_StateFunc
</UL>

<P><STRONG><a name="[89]"></a>Stop_mode_StateFunc</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, commander.o(.text.Stop_mode_StateFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Stop_mode_StateFunc &rArr; Stop &rArr; set_speed_target &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commander.o(.text.motion_StateManager_Init)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SysTick_Handler &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[f5]"></a>SystemClock_Config</STRONG> (Thumb, 172 bytes, Stack size 88 bytes, main.o(.text.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5c]"></a>SystemInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, system_stm32f4xx.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, stm32f4xx_it.o(.text.TIM4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM4_IRQHandler &rArr; HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[c7]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 322 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(.text.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[115]"></a>Update_Color_Flag</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, hardware_iic.o(.text.Update_Color_Flag))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_process_task
</UL>

<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[ac]"></a>Yuntai_set_Angle</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, steering gear control.o(.text.Yuntai_set_Angle))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task_create
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endC3_StateFunc
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_endC3_StateFunc
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endC2_StateFunc
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_endC2_StateFunc
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endC1_StateFunc
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_endC1_StateFunc
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endB3_StateFunc
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_endB3_StateFunc
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endB2_StateFunc
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_endB2_StateFunc
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endB1_StateFunc
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_endB1_StateFunc
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endA3_StateFunc
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_endA3_StateFunc
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endA2_StateFunc
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_endA2_StateFunc
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endA1_StateFunc
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_endA1_StateFunc
</UL>

<P><STRONG><a name="[f7]"></a>fsm_Add_Transition</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, fsm.o(.text.fsm_Add_Transition))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = fsm_Add_Transition &rArr; realloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_StateManager_Init
</UL>

<P><STRONG><a name="[f9]"></a>fsm_Create</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, fsm.o(.text.fsm_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = fsm_Create &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_StateManager_Init
</UL>

<P><STRONG><a name="[fb]"></a>fsm_Create_And_Add_State</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, fsm.o(.text.fsm_Create_And_Add_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = fsm_Create_And_Add_State &rArr; realloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_StateManager_Init
</UL>

<P><STRONG><a name="[104]"></a>fsm_Execute</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, fsm.o(.text.fsm_Execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fsm_Execute
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_StateManager_Execute
</UL>

<P><STRONG><a name="[105]"></a>fsm_Set_Initial_State</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fsm.o(.text.fsm_Set_Initial_State))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_StateManager_Init
</UL>

<P><STRONG><a name="[5b]"></a>main</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = main &rArr; MX_FREERTOS_Init &rArr; osThreadCreate &rArr; xTaskCreate &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM6_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C2_Init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C3_Init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[fe]"></a>main_task_create</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, maintask.o(.text.main_task_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = main_task_create &rArr; motion_StateManager_Init &rArr; fsm_Create_And_Add_State &rArr; realloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Solenoid_Close
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pump_Close
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Yuntai_set_Angle
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_StateManager_Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_ZDT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[103]"></a>motion_StateManager_Execute</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, commander.o(.text.motion_StateManager_Execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = motion_StateManager_Execute &rArr; fsm_Execute
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_Execute
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_process_task
</UL>

<P><STRONG><a name="[101]"></a>motion_StateManager_Init</STRONG> (Thumb, 1768 bytes, Stack size 32 bytes, commander.o(.text.motion_StateManager_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = motion_StateManager_Init &rArr; fsm_Create_And_Add_State &rArr; realloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_Set_Initial_State
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_Add_Transition
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_Create_And_Add_State
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_Create
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task_create
</UL>

<P><STRONG><a name="[5f]"></a>motion_process_task</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, maintask.o(.text.motion_process_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + In Cycle
<LI>Call Chain = motion_process_task &rArr;  motion_process_task (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_StateManager_Execute
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_process_task
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_process_task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> maintask.o(.text.main_task_create)
</UL>
<P><STRONG><a name="[a2]"></a>niMotorangle</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, motor.o(.text.niMotorangle))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = niMotorangle &rArr; set_speed_pos_target &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_speed_pos_target
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_beginC3_StateFunc
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_beginC2_StateFunc
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_beginC1_StateFunc
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_beginC1_StateFunc
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_beginB3_StateFunc
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_beginB3_StateFunc
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_beginB2_StateFunc
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_beginB2_StateFunc
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_beginB1_StateFunc
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_beginB1_StateFunc
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_beginA3_StateFunc
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_beginA3_StateFunc
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_beginA2_StateFunc
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_beginA2_StateFunc
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_beginA1_StateFunc
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_beginA1_StateFunc
</UL>

<P><STRONG><a name="[f1]"></a>osDelay</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cmsis_os.o(.text.osDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
</UL>

<P><STRONG><a name="[ff]"></a>osKernelStart</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmsis_os.o(.text.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = osKernelStart &rArr; vTaskStartScheduler &rArr; xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dc]"></a>osThreadCreate</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, cmsis_os.o(.text.osThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = osThreadCreate &rArr; xTaskCreate &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
</UL>

<P><STRONG><a name="[112]"></a>pvPortMalloc</STRONG> (Thumb, 500 bytes, Stack size 16 bytes, heap_4.o(.text.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[111]"></a>pxPortInitialiseStack</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.text.pxPortInitialiseStack))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[60]"></a>sensor_process_task</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, maintask.o(.text.sensor_process_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + In Cycle
<LI>Call Chain = sensor_process_task &rArr;  sensor_process_task (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_All_GRAY_Digital
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_Color_Flag
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_RGB_HSL
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_process_task
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_process_task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> maintask.o(.text.main_task_create)
</UL>
<P><STRONG><a name="[ec]"></a>set_speed_pos_target</STRONG> (Thumb, 264 bytes, Stack size 40 bytes, zdtstepmotor.o(.text.set_speed_pos_target))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = set_speed_pos_target &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;niMotorangle
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motorangle
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Left_Position
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Right_Position
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Backward_Position
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Forward_Position
</UL>

<P><STRONG><a name="[da]"></a>set_speed_target</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, zdtstepmotor.o(.text.set_speed_target))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = set_speed_target &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineTracking
</UL>

<P><STRONG><a name="[10e]"></a>uxListRemove</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, list.o(.text.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[117]"></a>vApplicationGetIdleTaskMemory</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, freertos.o(.text.vApplicationGetIdleTaskMemory))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[10a]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, list.o(.text.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[110]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(.text.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[116]"></a>vListInsert</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, list.o(.text.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[10b]"></a>vListInsertEnd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, list.o(.text.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[109]"></a>vPortEnterCritical</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, port.o(.text.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[10c]"></a>vPortExitCritical</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, port.o(.text.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[10d]"></a>vPortFree</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, heap_4.o(.text.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[119]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, port.o(.text.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[a3]"></a>vTaskDelay</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, tasks.o(.text.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_process_task
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_process_task
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task_create
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_mode_StateFunc
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endC3_StateFunc
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_beginC3_StateFunc
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_endC3_StateFunc
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_beginC3_StateFunc
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endC2_StateFunc
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_beginC2_StateFunc
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_endC2_StateFunc
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_beginC2_StateFunc
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endC1_StateFunc
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_beginC1_StateFunc
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_endC1_StateFunc
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_beginC1_StateFunc
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarryC_StateFunc
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endB3_StateFunc
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_beginB3_StateFunc
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_endB3_StateFunc
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_beginB3_StateFunc
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endB2_StateFunc
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_beginB2_StateFunc
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_endB2_StateFunc
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_beginB2_StateFunc
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endB1_StateFunc
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_beginB1_StateFunc
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_endB1_StateFunc
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_beginB1_StateFunc
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarryB_StateFunc
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endA3_StateFunc
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_beginA3_StateFunc
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_endA3_StateFunc
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_beginA3_StateFunc
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endA2_StateFunc
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_beginA2_StateFunc
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_endA2_StateFunc
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_beginA2_StateFunc
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_endA1_StateFunc
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_beginA1_StateFunc
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_endA1_StateFunc
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delivery_beginA1_StateFunc
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarryA_StateFunc
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Begin_StateFunc
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sigancatch
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_speed_pos_target
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_speed_target
</UL>

<P><STRONG><a name="[106]"></a>vTaskStartScheduler</STRONG> (Thumb, 196 bytes, Stack size 48 bytes, tasks.o(.text.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = vTaskStartScheduler &rArr; xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetIdleTaskMemory
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[113]"></a>vTaskSuspendAll</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tasks.o(.text.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[ed]"></a>vTaskSwitchContext</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, tasks.o(.text.vTaskSwitchContext))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[118]"></a>xPortStartScheduler</STRONG> (Thumb, 392 bytes, Stack size 32 bytes, port.o(.text.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvPortStartFirstTask
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnableVFP
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[f4]"></a>xPortSysTickHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, port.o(.text.xPortSysTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[102]"></a>xTaskCreate</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, tasks.o(.text.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xTaskCreate &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task_create
</UL>

<P><STRONG><a name="[107]"></a>xTaskCreateStatic</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, tasks.o(.text.xTaskCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = xTaskCreateStatic &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
</UL>

<P><STRONG><a name="[f3]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, tasks.o(.text.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[11c]"></a>xTaskIncrementTick</STRONG> (Thumb, 262 bytes, Stack size 32 bytes, tasks.o(.text.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[114]"></a>xTaskResumeAll</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, tasks.o(.text.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[11f]"></a>__free$realloc</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, mallocr.o(i.__free$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __free$realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>

<P><STRONG><a name="[fa]"></a>malloc</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, mallocr.o(i.__malloc$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_Create_And_Add_State
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_Create
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>

<P><STRONG><a name="[12c]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[12d]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[12e]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[f8]"></a>realloc</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, mallocr.o(i.realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = realloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__free$realloc
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_Add_Transition
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_Create_And_Add_State
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[ba]"></a>I2C_WaitOnFlagUntilTimeout</STRONG> (Thumb, 458 bytes, Stack size 24 bytes, stm32f4xx_hal_i2c.o(.text.I2C_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[d7]"></a>I2C_WaitOnMasterAddressFlagUntilTimeout</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, stm32f4xx_hal_i2c.o(.text.I2C_WaitOnMasterAddressFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[d8]"></a>I2C_WaitOnTXEFlagUntilTimeout</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(.text.I2C_WaitOnTXEFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_WaitOnTXEFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[b9]"></a>I2C_WaitOnRXNEFlagUntilTimeout</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(.text.I2C_WaitOnRXNEFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_WaitOnRXNEFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[b8]"></a>I2C_RequestMemoryRead</STRONG> (Thumb, 274 bytes, Stack size 40 bytes, stm32f4xx_hal_i2c.o(.text.I2C_RequestMemoryRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[d5]"></a>UART_SetConfig</STRONG> (Thumb, 238 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(.text.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[10f]"></a>prvInitialiseNewTask</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, tasks.o(.text.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>

<P><STRONG><a name="[108]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, tasks.o(.text.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvAddNewTaskToReadyList
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>

<P><STRONG><a name="[95]"></a>prvIdleTask</STRONG> (Thumb, 134 bytes, Stack size 0 bytes, tasks.o(.text.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvIdleTask &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(.text.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[94]"></a>prvTaskExitError</STRONG> (Thumb, 62 bytes, Stack size 4 bytes, port.o(.text.prvTaskExitError))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = prvTaskExitError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> port.o(.text.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[11a]"></a>vPortEnableVFP</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, port.o(.text.vPortEnableVFP))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[11b]"></a>prvPortStartFirstTask</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, port.o(.text.prvPortStartFirstTask))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[11d]"></a>internal_alloc</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, mallocr.o(i.internal_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
